"""Utility to convert Android.bp build to Bazel build files (.bzl).

This script reads a android.bp file, extracts library targets and their associated
source files, and then writes them into a structured bzl file for use in a
Bazel build environment.

Usage:
    python bp_to_bzl.py <input_build.bp> <output.bzl>

Example:
    python bp_to_bzl.py my_project/android.bp my_project/BUILD.bzl
"""

import sys
import re

def bp_to_bzl(build_bp, bzl):
    """Converts a build.bp file to a bzl file.

    Args:
        build_bp: Path to the input build.bp file.
        bzl: Path to the output bzl file.
    """

    target_pattern = r"(.*) =.*"
    entry_pattern = r'.*"(.*)".*'
    finished = r"^cc_library_static"

    active_target = None
    source_files = []
    targets = {}

    with open(build_bp, "r", encoding="utf-8") as bp_file:
        for line in bp_file:
            if re.match(finished, line):
                # We are done..
                break

            target_match = re.match(target_pattern, line)
            if target_match:
                if active_target:
                    targets[active_target] = source_files
                active_target = target_match.group(1)
                source_files = []

            entry_match = re.match(entry_pattern, line)
            if entry_match:
                # Remove the libvpx path prefix to accommodate the emulator build system
                source_files.append(entry_match.group(1).replace(
                    "//third_party/libvpx/source/", ""))

    if active_target and source_files:
        targets[active_target] = source_files

    with open(bzl, "w", encoding="utf-8") as bzl_file:
        bzl_file.write(f"## AUTOGENERATED BY RUNNING {' '.join(sys.argv)}\n")
        bzl_file.write("## DO NOT EDIT!\n\n")

        for library, files in targets.items():
            bzl_file.write(f"{library} = {files}\n")


if __name__ == "__main__":
    bp_to_bzl(sys.argv[1], sys.argv[2])
